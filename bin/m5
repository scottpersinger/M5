#!/usr/bin/env python
import getopt, sys
import glob
import urllib2_file
import urllib2
import shutil
import webbrowser
from threading import Timer

from m5compiler import *
import m5server

M5_DIR = os.path.join(os.path.dirname(__file__), "..")

def print_help():
    print "Usage: m5 <command> <options>\n"
    print "m5 create <path> - Create new app at path"
    print "m5 server [-e <environment> --examples --launchsim --nb] - Run the local web server for the current app"
    print "m5 compile - Expands dynamic entries in your app.html file to generate index.html"
    print "m5 deploy [--scratchpad] - Deploy the current app"
    print "m5 tutorial - Start the tutorial server"
    
  
def create_app(path):
    # Copy app template
    if os.path.exists(path):
        print "Error: path " + path + " already exists"
        exit()
    else:
        print "Creating new app " + path + "..."
        app_name = os.path.basename(path)
        shutil.copytree(os.path.join(M5_DIR, "templates", "cities"), path)
        print "  -> " + path
        for f in glob.glob(os.path.join(M5_DIR, "templates", "*.js")):
            shutil.copyfile(f, os.path.join(path, os.path.basename(f)))
            if re.search("m5\.env\.development\.js", f):
                envf = open(os.path.join(path, os.path.basename(f)), 'a')
                envf.write("M5.settings.app_name = '" + app_name + "'\n");
                envf.close()
            print "  -> " + os.path.basename(f)
        manifest = open(os.path.join(M5_DIR, "templates", "manifest.json")).read()
        manifest = re.sub("%%NAME%%", app_name, manifest)
        f = open(os.path.join(path, "manifest.json"), "w")
        f.write(manifest)
        f.close
        print "  -> manifest.json"
        print "done"

def run_server(example = False, launchsim = False, environment="development",open_browser=False):
    print "Running M5 web server with " + environment + " environment ..."
    if open_browser:
        webbrowser.open("http://localhost:8000")
    m5server.start_m5server(M5_DIR, environment=environment, include_sim=launchsim)

def open_tutorial_browser():
    webbrowser.open("http://localhost:7777")
        
def run_tutorial_server(open_browser=True):
    print "Serving M5 tutorial pages..."
    if open_browser:
        Timer(1.0, open_tutorial_browser).start()
    m5server.start_tutorial(os.path.join(M5_DIR, "docs", "tutorial"))
    
def deploy_app():
    print "Deploying app..."
    # For now we just upload everything in a huge mime message
    files = glob.glob("*") + glob.glob("*/*")
    app_name = os.path.basename(os.getcwd())
    data = {'__app_name' : app_name}
    for f in files:
        if os.path.isfile(f):
            data[f] = open(f)
    response = urllib2.urlopen("http://localhost:8000/app/" + app_name + "/upload", data)
    print response
    
def compile_app():
    name = "app.m5.html"
    print "Compiling " + name + "..."
    f = open(name, 'w')
    f.write(M5Compiler().compile("app.html", include_sim=False))
    f.close()
    print "done."
        
def main():
    if len(sys.argv) < 2:
        print_help()
        sys.exit(2)

    command = sys.argv[1]
    try:
        opts, args = getopt.getopt(sys.argv[2:], "he:l", ["help", "examples","launchsim","nb"])
    except getopt.GetoptError, err:
        # print help information and exit:
        print str(err) # will print something like "option -a not recognized"
        print_help()
        sys.exit(2)
    examples = False
    launchsim = False
    environment = "development"
    open_browser = True
    for o, arg in opts:
        if o in ("-h", "--help"):
            usage()
            sys.exit()
        elif o == "--examples":
            examples = True
        elif o in ("-l", "--launchsim"):
            launchsim = True
        elif o == "--nb":
            open_browser = False
        elif o in ("-e"):
            environment = arg
            if not environment in ("development","production","testing"):
                print "Error, unknown environment: " + arg
                environment = "development"
        else:
            assert False, "unknown option: " + o

    if command == "help":
        print_help();
        sys.exit(0)
    elif command == "tutorial":
        run_tutorial_server(open_browser=open_browser);
    elif command == "server":
        run_server(example = examples, launchsim = launchsim, environment = environment, open_browser=open_browser)
    elif command == "create":
        create_app(sys.argv[2])
    elif command == "deploy":
        deploy_app()
    elif command == "compile":
        compile_app()
    else:
        print "Error, unknown command: " + command
        sys.exit(2)

if __name__ == "__main__":
    main()
